// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sneaky;

#nullable disable

namespace Sneaky.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20240515114434_Sneaky")]
    partial class Sneaky
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Comparison", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Comparison", (string)null);
                });

            modelBuilder.Entity("ShoeShoeReview", b =>
                {
                    b.Property<int>("ReviewsId")
                        .HasColumnType("int");

                    b.Property<int>("ShoesId")
                        .HasColumnType("int");

                    b.HasKey("ReviewsId", "ShoesId");

                    b.HasIndex("ShoesId");

                    b.ToTable("ShoeShoeReview");
                });

            modelBuilder.Entity("Sneaky.Classes.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brand", (string)null);
                });

            modelBuilder.Entity("Sneaky.Classes.Favourite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Favourite", (string)null);
                });

            modelBuilder.Entity("Sneaky.Classes.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateCommentTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("Sneaky.Classes.Shoe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int?>("ComparisonId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FavouriteId")
                        .HasColumnType("int");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ComparisonId");

                    b.HasIndex("FavouriteId");

                    b.ToTable("Shoe", (string)null);
                });

            modelBuilder.Entity("Sneaky.Classes.ShoeReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateCommentTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ShoeReview", (string)null);
                });

            modelBuilder.Entity("Sneaky.Classes.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ComparisonId")
                        .HasColumnType("int");

                    b.Property<int?>("FavouriteId")
                        .HasColumnType("int");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int?>("ShoeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComparisonId");

                    b.HasIndex("FavouriteId");

                    b.HasIndex("ShoeId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("ShoeShoeReview", b =>
                {
                    b.HasOne("Sneaky.Classes.ShoeReview", null)
                        .WithMany()
                        .HasForeignKey("ReviewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sneaky.Classes.Shoe", null)
                        .WithMany()
                        .HasForeignKey("ShoesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sneaky.Classes.Review", b =>
                {
                    b.HasOne("Sneaky.Classes.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sneaky.Classes.Shoe", b =>
                {
                    b.HasOne("Sneaky.Classes.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Comparison", null)
                        .WithMany("Shoes")
                        .HasForeignKey("ComparisonId");

                    b.HasOne("Sneaky.Classes.Favourite", null)
                        .WithMany("Shoes")
                        .HasForeignKey("FavouriteId");

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("Sneaky.Classes.ShoeReview", b =>
                {
                    b.HasOne("Sneaky.Classes.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sneaky.Classes.User", b =>
                {
                    b.HasOne("Comparison", "Comparison")
                        .WithMany("Users")
                        .HasForeignKey("ComparisonId");

                    b.HasOne("Sneaky.Classes.Favourite", "Favourite")
                        .WithMany("Users")
                        .HasForeignKey("FavouriteId");

                    b.HasOne("Sneaky.Classes.Shoe", null)
                        .WithMany("UsersList")
                        .HasForeignKey("ShoeId");

                    b.Navigation("Comparison");

                    b.Navigation("Favourite");
                });

            modelBuilder.Entity("Comparison", b =>
                {
                    b.Navigation("Shoes");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Sneaky.Classes.Favourite", b =>
                {
                    b.Navigation("Shoes");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Sneaky.Classes.Shoe", b =>
                {
                    b.Navigation("UsersList");
                });
#pragma warning restore 612, 618
        }
    }
}
